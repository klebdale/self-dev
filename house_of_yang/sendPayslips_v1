function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Email Payslips')
    .addItem('Send Payslips', 'sendPayslips')
    .addToUi();
}

function sendPayslips() {
  var ui = SpreadsheetApp.getUi(); // Get the UI for showing dialog boxes
  ui.alert('Processing', 'The email sending process has started. Please wait...', ui.ButtonSet.OK);

  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var sheets = spreadsheet.getSheets();
  var excl = ['LABOR', 'SALARY', 'ENTRY LOG', 'BREAKAGE & SPOILAGE', 'Holidays', '13TH MONTH', 'SSS', 'Philhealth', 'PAGIBIG', 'PENALTIES', 'Payroll Email Log']; // excluded sheets
  //['Jannette','Juniel','Rego','Yoyoy','Daniel','JD','Kayjie','Marc','Mechel','Winnie','Cathy','Clyde','Francis','Jehu','Loloy','Chan']


  sheets.forEach(function(sheet) {
    if (!excl.includes(sheet.getSheetName())) {

      var name = sheet.getRange('B3').getValue();
      var email = sheet.getRange('B4').getValue();
      var payPeriodStart = new Date(sheet.getRange('B5').getValue());
      var payPeriodEnd = new Date(sheet.getRange('D5').getValue());
      var paymentDate = new Date(sheet.getRange('B21').getValue());

      var formattedPayPeriodStart = Utilities.formatDate(payPeriodStart, "GMT+8", 'MMM dd yyyy');
      var formattedPayPeriodEnd = Utilities.formatDate(payPeriodEnd, "GMT+8", 'MMM dd yyyy');
      var formattedPaymentDate = Utilities.formatDate(paymentDate, "GMT+8", 'MMM dd yyyy');

      var subject = 'Your Payroll Slip for ' + formattedPaymentDate;

      var message = "<p>Dear " + name + ",<br><br>I hope this email finds you well.<br><br>We are pleased to inform you that your payroll slip for " + formattedPayPeriodStart + " to " + formattedPayPeriodEnd + " has been generated.<br><br>Please review the attached payroll slip for a detailed breakdown. If you have any questions or notice any discrepancies, do not hesitate to reach out to the HR department.<br><br>Thank you for your continued hard work and dedication.<br><br>Best Regards,<br>House of Yang<br><br><i>Note: Please remember that your salary information is private and confidential</i>";
      
      var pdf = convertSheetToPDF(sheet);

      if (email) {
        try {
          MailApp.sendEmail({
            to: email,
            subject: subject,
            htmlBody: message,
            attachments: [pdf]
          });
          Logger.log('Sent payslip to ' + email);
          logEmail(sheet.getSheetName(), email, 'Success');
        } catch (error) {
          Logger.log('Failed to send payslip to ' + email + ': ' + error.message);
          logEmail(sheet.getSheetName(), email, 'Failed: ' + error.message);
        }

        // Introduce a delay to avoid triggering rate limits
        Utilities.sleep(5000); // 5 seconds delay
        //var emailQuotaRemaining = MailApp.getRemainingDailyQuota();
        //Logger.log("Remaining email quota: " + emailQuotaRemaining);
      }
    }
  });
  ui.alert('Done', 'The email sending process has completed successfully.', ui.ButtonSet.OK);
}


function logEmail(sheetName, email, status) {
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  var logSheet = spreadsheet.getSheetByName('Payroll Email Log');

  if (!logSheet) {
    logSheet = spreadsheet.insertSheet('Payroll Email Log');
    logSheet.appendRow(['Sheet Name', 'Email', 'Status', 'Date Sent']);
  }

  var dateSent = new Date();
  logSheet.appendRow([sheetName, email, status, Utilities.formatDate(dateSent, "GMT+8", 'MMM dd yyyy HH:mm:ss')]);
}

function convertSheetToPDF(sheet) {
  var spreadsheet = sheet.getParent();
  var sheetId = sheet.getSheetId();
  var url = 'https://docs.google.com/spreadsheets/d/' + spreadsheet.getId() + '/export?';

  var exportOptions = [
    'format=pdf',
    'size=letter',
    'portrait=true',
    'fitw=true',
    'sheetnames=false',
    'printtitle=false',
    'pagenumbers=false',
    'gridlines=false',
    'fzr=false',
    'gid=' + sheetId
  ];

  var params = {
    method: 'GET',
    headers: { 'Authorization': 'Bearer ' + ScriptApp.getOAuthToken() }
  };

  var response = UrlFetchApp.fetch(url + exportOptions.join('&'), params);
  return response.getBlob().setName(sheet.getName() + '.pdf');
}